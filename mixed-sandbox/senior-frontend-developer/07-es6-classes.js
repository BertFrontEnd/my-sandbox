// Создание объекта до ES6
const animalEs5 = {
  name: 'Animal',
  age: 5,
  hasTail: true,
};

console.log(animalEs5);

// Создание объекта в ES6

// Ключевое слово class
// Название объекта с большой буквы
class Animal {
  // Статические методы или переменные,
  // Доступны только у самого класса
  // Создаются при помощью ключевого слова static
  static type = 'ANIMAL';

  // Инициализация объекта
  // С помощью метода constructor
  // Метод в качестве параметра принимает объект с параметрами
  // Который будет перечисляться в данный класс
  constructor(option) {
    // Для создания полей в инстанс класса -> копии класса
    // Используется ключевое слово this, иначе говоря,
    // Инициализация через ключевое слово this
    // Которое будет указывать на текущий объект
    this.name = option.name;
    this.age = option.age;
    this.hasTail = option.hasTail;
  }

  // Метод класса
  // Попадает в прототип создаваемого объекта
  voice() {
    console.log("I'm Batman!");
  }
}

// Создание самого объекта

// С помощью ключевого слова new
// Указываем от какого класса будет
// Создаваться новый объект
// В скобках передается объект с полями
const animalEs6 = new Animal({
  name: 'Animal',
  age: 5,
  hasTail: true,
});

// Объект - наследник класса
// Первым идет прототип класса
// Затем прототип глобального объекта Object
console.log(animalEs6);

// Вызов метода из прототипа класса
console.log(animalEs6.voice());

// Доступ к статическому методу класса Animal
console.log(Animal.type);

// Наследование при помощи ключевого слова extends
class Cat extends Animal {
  static type = 'CAT';

  // Реализация собственного метода constructor
  // Класса Cat
  constructor(option) {
    // Так как данный класс Cat - это наследник
    // Класса Animal, необходимо вызвать его конструктор
    // Иначе говоря, конструктор родительского класса - класса Animal
    // Это делается с помощью ключевого слово super, как метода
    // Который принимает параметр родительского класса Animal - option
    super(option);
    this.color = option.color;
  }

  // Так же в дочернем класса можно переписывать
  // Родительские методы
  voice() {
    // Для сохранения доступа к методу родительского класса
    // Используется ключевого слово super
    // Используется оно как объект
    super.voice();
    console.log('No! I am Catwoman');
  }
}

// Создание объекта
const cat = new Cat({
  name: 'Cat',
  age: 7,
  hasTail: true,
  // Для добавления полей в прототипе класса
  // Необходимо реализовать свой метод constructor
  color: 'black',
});

// Обращение к созданному объекту
console.log(cat);

// Доступны методы из прототипа класса Animal
// Обращение к переписанному методу voice
// Так же, сначала срабатывает метод
// Родительского класса, затем дочернего
console.log(cat.voice());

// Доступ к статическому методу класса Cat
console.log(Cat.type);

// Обращение к новому полю объекта cat от класса Cat
console.log(cat.color);
